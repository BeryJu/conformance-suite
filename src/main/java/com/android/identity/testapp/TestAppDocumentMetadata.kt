package org.multipaz.testapp

import kotlinx.io.bytestring.ByteString
import kotlinx.io.bytestring.isEmpty
import org.multipaz.cbor.*
import org.multipaz.cbor.annotation.CborSerializable
import org.multipaz.document.Document
import org.multipaz.document.DocumentMetadata
import kotlin.concurrent.Volatile

class TestAppDocumentMetadata private constructor(
    serializedData: ByteString?,
    private val saveFn: suspend (data: ByteString) -> Unit
) : DocumentMetadata {
    @Volatile
    private var data: TestData

    override val provisioned: Boolean
        get() = true
    override val displayName: String
        get() = data.displayName
    override val typeDisplayName: String
        get() = data.typeDisplayName
    override val cardArt: ByteString
        get() = data.cardArt
    override val issuerLogo: ByteString?
        get() = null

    init {
        data = if (serializedData == null || serializedData.isEmpty()) {
            TestData()
        } else {
            TestData.fromCbor(serializedData.toByteArray())
        }
    }

    suspend fun initialize(
        displayName: String,
        typeDisplayName: String,
        cardArt: ByteString,
    ) {
        val data = TestData(displayName, typeDisplayName, cardArt)
        this.data = data
        saveFn(ByteString(data.toCbor()))
    }

    override suspend fun documentDeleted() {
    }

    companion object {
        suspend fun create(
            documentId: String,
            serializedData: ByteString?,
            saveFn: suspend (data: ByteString) -> Unit
        ): TestAppDocumentMetadata {
            return TestAppDocumentMetadata(serializedData, saveFn)
        }
    }

}

val Document.testMetadata: TestAppDocumentMetadata
    get() = metadata as TestAppDocumentMetadata



// This file was generated by org.multipaz.processor.CodeBuilder, do not edit by hand
@CborSerializable
data class TestData(
	val displayName: String = "",
	val typeDisplayName: String = "",
	val cardArt: ByteString = ByteString(),
) {
	companion object
}

fun TestData.toCbor(): ByteArray {
	return Cbor.encode(toDataItem())
}


fun TestData.Companion.fromCbor(data: ByteArray): TestData {
	return TestData.fromDataItem(Cbor.decode(data))
}

fun TestData.toDataItem(): DataItem {
	val builder = CborMap.builder()
	builder.put("displayName", Tstr(this.displayName))
	builder.put("typeDisplayName", Tstr(this.typeDisplayName))
	builder.put("cardArt", Bstr(this.cardArt.toByteArray()))
	return builder.end().build()
}

fun TestData.Companion.fromDataItem(dataItem: DataItem): TestData {
	val displayName = dataItem["displayName"].asTstr
	val typeDisplayName = dataItem["typeDisplayName"].asTstr
	val cardArt = ByteString(dataItem["cardArt"].asBstr)
	return TestData(
		displayName = displayName,
		typeDisplayName = typeDisplayName,
		cardArt = cardArt,
	)
}
